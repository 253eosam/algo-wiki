import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.ClVAdkRN.js";const o=JSON.parse('{"title":"238. Product of Array Except Self (LeetCode)","description":"","frontmatter":{},"headers":[],"relativePath":"problems/leetcode/238. Product of Array Except Self (LeetCode).md","filePath":"problems/leetcode/238. Product of Array Except Self (LeetCode).md"}'),h={name:"problems/leetcode/238. Product of Array Except Self (LeetCode).md"};function t(e,s,k,p,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_238-product-of-array-except-self-leetcode" tabindex="-1">238. Product of Array Except Self (LeetCode) <a class="header-anchor" href="#_238-product-of-array-except-self-leetcode" aria-label="Permalink to &quot;238. Product of Array Except Self (LeetCode)&quot;">​</a></h1><p>🔗 문제 링크 → <a href="https://leetcode.com/problems/product-of-array-except-self" target="_blank" rel="noreferrer">LeetCode 238. Product of Array Except Self</a></p><h2 id="🧩-문제-설명" tabindex="-1">🧩 문제 설명 <a class="header-anchor" href="#🧩-문제-설명" aria-label="Permalink to &quot;🧩 문제 설명&quot;">​</a></h2><p>정수 배열 <code>nums</code>가 주어졌을 때, <code>answer[i]</code>는 <code>nums[i]</code>를 제외한 나머지 모든 요소의 곱이 되도록 <code>answer</code> 배열을 반환하는 문제입니다.</p><ul><li>곱셈 연산은 사용할 수 있지만 <strong>나눗셈 없이 O(n)</strong> 시간에 해결하는 풀이도 요구됩니다.</li><li>공간 복잡도는 O(1)로 간주되며, <code>answer</code> 배열은 반환용이므로 공간 사용에 포함되지 않습니다.</li></ul><h2 id="💡-문제-해결-전략" tabindex="-1">💡 문제 해결 전략 <a class="header-anchor" href="#💡-문제-해결-전략" aria-label="Permalink to &quot;💡 문제 해결 전략&quot;">​</a></h2><h3 id="🔸-나눗셈을-사용하는-방식-원래-코드" tabindex="-1">🔸 나눗셈을 사용하는 방식 (원래 코드) <a class="header-anchor" href="#🔸-나눗셈을-사용하는-방식-원래-코드" aria-label="Permalink to &quot;🔸 나눗셈을 사용하는 방식 (원래 코드)&quot;">​</a></h3><ol><li>전체 배열을 순회하며 0이 아닌 수들의 곱(<code>multiplication</code>)을 계산합니다.</li><li>0의 개수를 세어 분기합니다: <ul><li>0이 2개 이상이면 모든 결과는 0입니다.</li><li>0이 1개면 0인 위치에만 곱한 값을 넣고, 나머지는 0입니다.</li><li>0이 없다면 각 요소를 <code>총곱 / num</code>으로 계산합니다.</li></ul></li></ol><h3 id="🔸-나눗셈-없이-푸는-방식-prefix-suffix-곱-활용" tabindex="-1">🔸 나눗셈 없이 푸는 방식 (Prefix &amp; Suffix 곱 활용) <a class="header-anchor" href="#🔸-나눗셈-없이-푸는-방식-prefix-suffix-곱-활용" aria-label="Permalink to &quot;🔸 나눗셈 없이 푸는 방식 (Prefix &amp; Suffix 곱 활용)&quot;">​</a></h3><ul><li>각 인덱스에 대해 자신을 제외한 왼쪽 곱과 오른쪽 곱을 곱해줍니다.</li><li>먼저 왼쪽 곱을 구한 뒤, 오른쪽에서 역순으로 곱을 누적하며 정답 배열을 완성합니다.</li><li>이 방식은 나눗셈 없이 O(n) 시간과 O(1) 공간(O(n) 출력 배열 제외)으로 구현됩니다.</li></ul><h2 id="✅-typescript-풀이-코드" tabindex="-1">✅ TypeScript 풀이 코드 <a class="header-anchor" href="#✅-typescript-풀이-코드" aria-label="Permalink to &quot;✅ TypeScript 풀이 코드&quot;">​</a></h2><h3 id="📌-개선된-나눗셈-풀이-가독성-향상" tabindex="-1">📌 개선된 나눗셈 풀이 (가독성 향상) <a class="header-anchor" href="#📌-개선된-나눗셈-풀이-가독성-향상" aria-label="Permalink to &quot;📌 개선된 나눗셈 풀이 (가독성 향상)&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> productExceptSelf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zeroCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalProduct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) zeroCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalProduct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (zeroCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) answer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (zeroCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) answer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalProduct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalProduct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="📌-나눗셈-없이-푸는-풀이" tabindex="-1">📌 나눗셈 없이 푸는 풀이 <a class="header-anchor" href="#📌-나눗셈-없이-푸는-풀이" aria-label="Permalink to &quot;📌 나눗셈 없이 푸는 풀이&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> productExceptSelf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 왼쪽 곱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    answer[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[i]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 오른쪽 곱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> suffix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    answer[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> suffix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    suffix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[i]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="🛠️-코드-동작-원리" tabindex="-1">🛠️ 코드 동작 원리 <a class="header-anchor" href="#🛠️-코드-동작-원리" aria-label="Permalink to &quot;🛠️ 코드 동작 원리&quot;">​</a></h2><h3 id="나눗셈-풀이" tabindex="-1">나눗셈 풀이 <a class="header-anchor" href="#나눗셈-풀이" aria-label="Permalink to &quot;나눗셈 풀이&quot;">​</a></h3><ol><li><code>reduce</code> 없이 for 루프로 곱과 0의 개수 계산</li><li>0 개수에 따라 결과 배열 분기 처리</li></ol><h3 id="나눗셈-없이-푸는-풀이" tabindex="-1">나눗셈 없이 푸는 풀이 <a class="header-anchor" href="#나눗셈-없이-푸는-풀이" aria-label="Permalink to &quot;나눗셈 없이 푸는 풀이&quot;">​</a></h3><ol><li>왼쪽부터 누적 곱을 저장 (<code>prefix</code>)</li><li>오른쪽에서 누적 곱을 다시 곱해줌 (<code>suffix</code>)</li><li>결국 <code>answer[i] = 왼쪽곱 * 오른쪽곱</code></li></ol><h2 id="📊-시간-및-공간-복잡도-분석" tabindex="-1">📊 시간 및 공간 복잡도 분석 <a class="header-anchor" href="#📊-시간-및-공간-복잡도-분석" aria-label="Permalink to &quot;📊 시간 및 공간 복잡도 분석&quot;">​</a></h2><table tabindex="0"><thead><tr><th>풀이 방법</th><th>시간 복잡도</th><th>공간 복잡도 (출력 제외)</th></tr></thead><tbody><tr><td>나눗셈 사용</td><td>O(n)</td><td>O(1)</td></tr><tr><td>나눗셈 없이</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><h2 id="🔄-다른-풀이-방법과의-비교" tabindex="-1">🔄 다른 풀이 방법과의 비교 <a class="header-anchor" href="#🔄-다른-풀이-방법과의-비교" aria-label="Permalink to &quot;🔄 다른 풀이 방법과의 비교&quot;">​</a></h2><ul><li><strong>나눗셈 풀이</strong>는 직관적이고 코드가 짧지만, follow-up 조건에는 맞지 않음</li><li><strong>Prefix &amp; Suffix 곱 풀이</strong>는 나눗셈 없이도 O(n)에 해결 가능하며, 인터뷰에서도 자주 사용됨</li><li>공간 복잡도도 출력 배열만 사용하는 수준으로 최적</li></ul><h2 id="📝-요점-정리" tabindex="-1">📝 요점 정리 <a class="header-anchor" href="#📝-요점-정리" aria-label="Permalink to &quot;📝 요점 정리&quot;">​</a></h2><ul><li>0의 개수를 고려한 곱셈 기반 풀이: 단순하지만 나눗셈을 사용</li><li>나눗셈 없이 푸는 방식: prefix/suffix 곱으로 O(n) 시간, O(1) 공간에 해결 가능</li><li>LeetCode follow-up 조건을 만족하려면 나눗셈 없는 방식 권장</li><li>인터뷰 대비로 반드시 두 방법 모두 숙지 필요</li></ul>`,26)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
