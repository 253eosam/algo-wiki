import{_ as i,c as a,o as t,ae as h}from"./chunks/framework.ClVAdkRN.js";const o=JSON.parse('{"title":"0. Quick Sort (Custom)","description":"","frontmatter":{},"headers":[],"relativePath":"problems/custom/Quick Sort (Custom).md","filePath":"problems/custom/Quick Sort (Custom).md"}'),n={name:"problems/custom/Quick Sort (Custom).md"};function l(k,s,p,e,r,d){return t(),a("div",null,s[0]||(s[0]=[h(`<h1 id="_0-quick-sort-custom" tabindex="-1">0. Quick Sort (Custom) <a class="header-anchor" href="#_0-quick-sort-custom" aria-label="Permalink to &quot;0. Quick Sort (Custom)&quot;">​</a></h1><h2 id="문제-설명" tabindex="-1">문제 설명 <a class="header-anchor" href="#문제-설명" aria-label="Permalink to &quot;문제 설명&quot;">​</a></h2><p>주어진 숫자 배열을 퀵소트(Quick Sort) 알고리즘을 사용해 오름차순으로 정렬하세요. 퀵소트는 분할 정복(Divide and Conquer) 전략을 기반으로 하는 효율적인 정렬 알고리즘으로, 평균적으로 매우 빠른 성능을 보여줍니다.</p><h2 id="💡-문제-해결-전략" tabindex="-1">💡 문제 해결 전략 <a class="header-anchor" href="#💡-문제-해결-전략" aria-label="Permalink to &quot;💡 문제 해결 전략&quot;">​</a></h2><ul><li>배열이 비어있거나 요소가 하나인 경우 그대로 반환합니다 (base case).</li><li>기준점(Pivot)을 배열의 마지막 요소로 선택합니다.</li><li>pivot보다 작은 요소는 <code>left</code>, 큰 요소는 <code>right</code>, 같은 요소는 <code>equal</code> 배열에 따로 저장합니다.</li><li>각 부분 배열에 대해 재귀적으로 퀵소트를 수행한 뒤, 결과를 병합합니다.</li></ul><h2 id="🧠-typescript-코드" tabindex="-1">🧠 TypeScript 코드 <a class="header-anchor" href="#🧠-typescript-코드" aria-label="Permalink to &quot;🧠 TypeScript 코드&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pivot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> equal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pivot) left.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pivot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item) right.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> equal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(left), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">equal, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(right)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr))</span></span></code></pre></div><h2 id="🛠️-코드-동작-원리" tabindex="-1">🛠️ 코드 동작 원리 <a class="header-anchor" href="#🛠️-코드-동작-원리" aria-label="Permalink to &quot;🛠️ 코드 동작 원리&quot;">​</a></h2><ol><li><strong>Base Case 처리</strong>: 배열 길이가 0 또는 1이면 바로 반환합니다.</li><li><strong>Pivot 설정</strong>: 배열의 마지막 요소를 기준점(pivot)으로 설정합니다.</li><li><strong>분할 과정</strong>: <ul><li>배열을 순회하면서 pivot보다 작은 값은 <code>left</code>, 큰 값은 <code>right</code>, 같은 값은 <code>equal</code> 배열에 저장합니다.</li></ul></li><li><strong>재귀 호출 및 병합</strong>: <ul><li><code>left</code>와 <code>right</code> 배열에 대해 <code>quickSort</code>를 재귀 호출하고, 정렬된 결과를 <code>[left, equal, right]</code> 순서로 병합하여 반환합니다.</li></ul></li></ol><h2 id="📊-시간-및-공간-복잡도-분석" tabindex="-1">📊 시간 및 공간 복잡도 분석 <a class="header-anchor" href="#📊-시간-및-공간-복잡도-분석" aria-label="Permalink to &quot;📊 시간 및 공간 복잡도 분석&quot;">​</a></h2><table tabindex="0"><thead><tr><th>구분</th><th>평균</th><th>최악</th></tr></thead><tbody><tr><td>시간 복잡도</td><td>O(n log n)</td><td>O(n²)</td></tr><tr><td>공간 복잡도</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><ul><li>평균적으로는 매우 빠르지만, 이미 정렬된 배열 등 특정 케이스에서는 최악의 성능(O(n^2))이 나올 수 있습니다.</li><li>공간 복잡도는 추가 배열 사용으로 인해 O(n)입니다.</li></ul><h2 id="🧩-다른-풀이-방법과-비교" tabindex="-1">🧩 다른 풀이 방법과 비교 <a class="header-anchor" href="#🧩-다른-풀이-방법과-비교" aria-label="Permalink to &quot;🧩 다른 풀이 방법과 비교&quot;">​</a></h2><table tabindex="0"><thead><tr><th>알고리즘</th><th>평균 시간 복잡도</th><th>공간 복잡도</th><th>비고</th></tr></thead><tbody><tr><td>Quick Sort</td><td>O(n log n)</td><td>O(n)</td><td>평균 성능 우수, 불안정 정렬</td></tr><tr><td>Merge Sort</td><td>O(n log n)</td><td>O(n)</td><td>안정 정렬, 공간 사용 큼</td></tr><tr><td>Heap Sort</td><td>O(n log n)</td><td>O(1)</td><td>불안정 정렬, 제자리 정렬</td></tr><tr><td>Bubble Sort</td><td>O(n^2)</td><td>O(1)</td><td>구현 쉬우나 비효율적</td></tr></tbody></table><h2 id="📝-요점-정리" tabindex="-1">📝 요점 정리 <a class="header-anchor" href="#📝-요점-정리" aria-label="Permalink to &quot;📝 요점 정리&quot;">​</a></h2><ul><li>퀵소트는 &quot;분할 정복&quot; 기반의 빠른 정렬 알고리즘입니다.</li><li>pivot을 기준으로 배열을 분할하고 재귀적으로 정렬합니다.</li><li>평균 시간복잡도는 O(n log n)으로 매우 효율적입니다.</li><li>하지만 최악의 경우 성능 저하(O(n^2))가 있으므로 pivot 선택이 중요합니다.</li><li>공간 복잡도는 추가 배열 사용으로 인해 O(n)입니다.</li></ul>`,16)]))}const g=i(n,[["render",l]]);export{o as __pageData,g as default};
