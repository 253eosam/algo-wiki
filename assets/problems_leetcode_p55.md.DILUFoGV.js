import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.ClVAdkRN.js";const o=JSON.parse('{"title":"LeetCode 55 - Jump Game","description":"","frontmatter":{},"headers":[],"relativePath":"problems/leetcode/p55.md","filePath":"problems/leetcode/p55.md"}'),h={name:"problems/leetcode/p55.md"};function n(l,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="leetcode-55-jump-game" tabindex="-1">LeetCode 55 - Jump Game <a class="header-anchor" href="#leetcode-55-jump-game" aria-label="Permalink to &quot;LeetCode 55 - Jump Game&quot;">​</a></h1><h2 id="문제-설명" tabindex="-1">문제 설명 <a class="header-anchor" href="#문제-설명" aria-label="Permalink to &quot;문제 설명&quot;">​</a></h2><p><code>nums</code> 배열이 주어졌을 때, 처음 인덱스에서 시작하여 마지막 인덱스에 도달할 수 있는지 판단하는 문제입니다. 각 원소 <code>nums[i]</code>는 해당 인덱스에서 최대 몇 칸까지 점프할 수 있는지를 의미합니다.</p><h2 id="접근-방법-greedy-그리디-방식" tabindex="-1">접근 방법 - Greedy (그리디) 방식 <a class="header-anchor" href="#접근-방법-greedy-그리디-방식" aria-label="Permalink to &quot;접근 방법 - Greedy (그리디) 방식&quot;">​</a></h2><h3 id="핵심-아이디어" tabindex="-1">핵심 아이디어 <a class="header-anchor" href="#핵심-아이디어" aria-label="Permalink to &quot;핵심 아이디어&quot;">​</a></h3><ul><li>매 순간 <strong>현재 위치에서 갈 수 있는 최대 거리(maxReach)</strong> 를 업데이트합니다.</li><li>현재 인덱스가 <strong>maxReach보다 크다면</strong> 더 이상 앞으로 진행할 수 없으므로 <code>false</code>를 반환합니다.</li><li>끝까지 도달하면 <code>true</code>를 반환합니다.</li></ul><h2 id="코드" tabindex="-1">코드 <a class="header-anchor" href="#코드" aria-label="Permalink to &quot;코드&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> canJump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxReach </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxReach) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 현재 위치에 도달 불가능</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxReach </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxReach, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[i])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (maxReach </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 마지막 인덱스 도달 가능</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="시간-및-공간-복잡도" tabindex="-1">시간 및 공간 복잡도 <a class="header-anchor" href="#시간-및-공간-복잡도" aria-label="Permalink to &quot;시간 및 공간 복잡도&quot;">​</a></h2><table tabindex="0"><thead><tr><th>구분</th><th>복잡도</th></tr></thead><tbody><tr><td>시간 복잡도</td><td>O(n)</td></tr><tr><td>공간 복잡도</td><td>O(1)</td></tr></tbody></table><h2 id="주요-포인트" tabindex="-1">주요 포인트 <a class="header-anchor" href="#주요-포인트" aria-label="Permalink to &quot;주요 포인트&quot;">​</a></h2><ul><li><strong>최적화된 Greedy 접근법</strong></li><li>매 순간 도달 가능한 최대 거리만 신경 쓰는 단순한 로직</li><li>조기 종료 조건을 통해 불필요한 연산 최소화</li></ul>`,12)]))}const g=i(h,[["render",n]]);export{o as __pageData,g as default};
